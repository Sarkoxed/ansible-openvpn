---
- name: build_ca
  hosts: ca
  vars: 
    ca_directory: /home/{{ ansible_user }}/ca
    organization_name: ABOBUSI
  tasks:
    - name: ping host
      ansible.builtin.ping:
    
    - name: create ca directory
      ansible.builtin.file:
        path: "{{ ca_directory }}"
        state: directory

    - name: check that ca directory exists
      command: ls {{ ca_directory }}
      register: directory_exists
      ignore_errors: yes

    - name: Copy vars file
      ansible.builtin.template:
        src: files/vars.j2
        dest: "{{ ca_directory }}/vars"
        remote_src: no
      when: directory_exists is succeeded

    - name: create local CA
      ansible.builtin.command:
        cmd: easyrsa {{ item }}
        chdir: "{{ ca_directory }}"
      loop:
        - init-pki
        - --batch build-ca nopass
      when: directory_exists is succeeded

- name: crs
  hosts: openvpn
  vars:
    server_directory: "/home/{{ ansible_user }}/easyrsa"
    organization_name: ABOBUSI
  tasks:
    - name: Install openvpn and easyrsa
      become: yes
      apt:
        name: "{{ item }}"
        update_cache: yes
      loop:
        - easy-rsa

    - name: Create server pki directory
      ansible.builtin.command:
        cmd: "cp -r /usr/share/easy-rsa {{ server_directory }}"

    - name: Copy vars file
      ansible.builtin.template:
        src: files/vars.j2
        dest: "{{ server_directory }}/vars"
        remote_src: no
    
    - name: init pki and generate request
      ansible.builtin.command:
        cmd: "./easyrsa {{ item }}"
        chdir: "{{ server_directory }}"
      loop:
        - init-pki
        - "--batch gen-req {{ name }} nopass"
          #        - "--req-org={{ organization_name }} --req-email=server@dot.com gen-req server"


- name: sign requests
  hosts: ca
  vars:
    ca_directory: /home/{{ ansible_user }}/ca
  tasks:
    - name: pull requests
      ansible.builtin.fetch:
        src: "/home/{{ hostvars[item]['ansible_user'] }}/easyrsa/pki/reqs/{{ item }}.req"
        dest: "{{ ca_directory }}/pki/reqs/"
        flat: yes
      delegate_to: "{{ item }}"
      with_items: "{{ groups['openvpn'] }}"

    - name: sign requests
      ansible.builtin.command:
        cmd: "easyrsa --batch sign-req  server {{ item }}"
        chdir: "{{ ca_directory }}"
      with_items: "{{ groups['openvpn'] }}"

    - name: push certs
      ansible.builtin.copy:
        src: "{{ ca_directory }}/pki/issued/{{ item }}.crt"
        dest: "/home/{{ hostvars[item]['ansible_user'] }}/easyrsa/"
        remote_src: no
      delegate_to: "{{ item }}"
      with_items: "{{ groups['openvpn'] }}"
        
    - name: push ca cert
      ansible.builtin.copy:
        src: "{{ ca_directory }}/pki/ca.crt"
        dest: "/home/{{ hostvars[item]['ansible_user'] }}/easyrsa/"
        remote_src: no
      delegate_to: "{{ item }}"
      with_items: "{{ groups['openvpn'] }}"


- name: openvpn
  hosts: openvpn
  tasks:
    - name: Ping my hosts
      ansible.builtin.ping:

    - name: Install openvpn
      become: yes
      ansible.builtin.apt:
        name: "{{ item }}"
        update_cache: yes
      loop:
        - vim
        - openvpn
        - easy-rsa

    - name: tls auth key
      become: yes
      ansible.builtin.command:
        cmd: openvpn --genkey tls-auth /etc/openvpn/server/ta.key

    - name: Copy server config
      become: yes
      ansible.builtin.template:
        src: files/server.conf.j2
        dest: /etc/openvpn/server/server.conf
        remote_src: no
   
    - name: copy files
      become: yes
      ansible.builtin.copy:
        src: "/home/{{ansible_user}}/easyrsa/{{item}}"
        dest: "/etc/openvpn/server/{{item}}"
        remote_src: yes
      loop:
        - "{{ name }}.crt"
        - "pki/private/{{ name }}.key"
        - ca.crt

    - name: ipv4 forward
      become: yes
      replace:
        path: /etc/sysctl.conf
        regexp: 'net\.ipv4\.ip_forward=.'
        replace: 'net.ipv4.ip_forward=1'
      notify: sysctl

    - name: ufw before rules
      become: yes
      ansible.builtin.blockinfile:
        path: /etc/ufw/before.rules
        block: |
          "# START OPENVPN RULES"
          "# NAT table rules"
          "*nat"
          ":POSTROUTING ACCEPT [0:0]"
          "# Allow traffic from OpenVPN client to eth0 (change to the interface you discovered!)"
          "-A POSTROUTING -s 10.8.0.0/8 -o eth0 -j MASQUERADE"
          "COMMIT"
          "# END OPENVPN RULES"
        insertafter: "#   ufw-before-forward"
    
    - name: forward policy
      become: yes
      replace:
        path: /etc/default/ufw
        regexp: 'DEFAULT_FORWARD_POLICY=".*"'
        replace: 'DEFAULT_FORWARD_POLICY="ACCEPT"'

    - name: Allow acces to ports
      ansible.builtin.ufw:
        rule: allow
        port: "{{ openvpn_port }}"
        proto: "{{ proto }}"

    - name: Allow openssh
      ansible.builtin.ufw:
        rule: allow
        proto: OpenSSH
      notify: Restart ufw
    
    - name: add nobody
      ansible.builtin.group:
        name: nobody
      notify: start and enable openvpn
  
    # add client

  handlers:
    - name: start and enable openvpn
      service:
        name: openvpn-server@server
        state: started
        enabled: yes

    - name: Restart ufw
      ufw:
        rule: "{{ item }}"
      loop:
        - disable
        - enable

    - name: sysctl
      become: yes
      ansible.builtin.command:
        cmd: sysctl -p
